options
{
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = false;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SonQueryParser)

package com.terracottatech.tcson.parser.query;

import com.terracottatech.tcson.parser.FieldReference;

import java.util.List;
import java.util.ArrayList;

public class SonQueryParser
{
}

PARSER_END(SonQueryParser)

TOKEN [ IGNORE_CASE ] :
{
  < KW_LSQUARE : "[" >
  | < KW_RSQUARE : "]" >
  | < KW_COMMA : "," >
  | < KW_COLON : ":" >
  | < KW_PERIOD : "." >
}

SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN [IGNORE_CASE] :
{
 <#DIGIT: ["0"-"9"] >
 | <#ALPHA: ["a"-"z"] | "-" | "_" >
 | <#ALPHANUM: <DIGIT> | <ALPHA> >
 | <INT_NUMBER: (<DIGIT>)+ >
 | <INT_SPAN: <INT_NUMBER> "-" <INT_NUMBER> >
 | <STRING_LITERAL: <ALPHA> (<ALPHANUM>)*>
}


/*
    respin:

        <dotspec> := <dotspec1> | <dotspec2>
        <dotspec1> := (<single ref>) ( <innerpair> )*
        <dotspec2> := "." ( <innerpair> )*
        <innerpair> := ("." (<single ref>)? )
        <single ref> := ( <array ref> | <field ref> )
        <array ref> := [ <arrspec> ]
        <field ref> := <alphastring>

 */

List<FieldReference> dotterSpec():
{
  List<FieldReference> ret=new ArrayList();
}
{
   (
      ret = dotspec1()
      | ret=dotspec2()
   )
   { return ret; }
}

List<FieldReference> dotspec1():
{
  List<FieldReference> ret=new ArrayList<>();
  FieldReference fr=null;
}
{
   (
      fr = singleRef() { ret.add(fr); }
      (
         fr=innerPair() { ret.add(fr); }
      )*
   )
   { return ret; }
}

List<FieldReference> dotspec2():
{
  List<FieldReference> ret=new ArrayList<>();
  FieldReference fr=null;
}
{
   (
      <KW_PERIOD> { ret.add(new FieldReference()); }
      (
         fr=innerPair() { ret.add(fr); }
      )*
   )
   { return ret; }
}

FieldReference innerPair():
{
   FieldReference fr=null;
}
{
    (
       <KW_PERIOD>
       ( fr=singleRef() )?
    )
    { return fr!=null?fr:new FieldReference(); }
}

FieldReference singleRef():
{
   FieldReference fr=null;
}
{
   (
       (
          fr=fieldComponent()
       )
       |
       (
          fr=arraySpec()
       )
   )
   { return fr; }
}

FieldReference fieldComponent():
{
   Token t1;
}
{

   t1=<STRING_LITERAL> { return new FieldReference(t1.image.trim()); }
}

List<Integer> arrayPart():
{
   Token t1;
   Token t2=null;
   List<Integer> list = new ArrayList<>();
}
{
   (
       (
         t1=<INT_SPAN>
         {
            String[] parts=t1.image.trim().split("-");
            int from = Integer.parseInt(parts[0].trim());
            int to = Integer.parseInt(parts[1].trim());
            if(from>to || from<0 || to <0) {
               throw new ParseException("Invalid array spans: "+t1.image);
            }
            for(int i=from;i<=to;i++) {
               list.add(i);
            }
         }
       )
       |
       (
          t1=<INT_NUMBER>
          {
            int p = Integer.parseInt(t1.image.trim());
            list.add(p);
          }
       )
    )
    { return list; }
}

FieldReference arraySpec():
{
   List<Integer> list = new ArrayList<>();
   List<Integer> subList;
}
{
   (
      <KW_LSQUARE>
      (
         subList=arrayPart()
         {
           list.addAll(subList);
         }
         (
             <KW_COMMA>
             subList=arrayPart()
             {
               list.addAll(subList);
             }
         )*
      )?
      <KW_RSQUARE>
   )
   { return new FieldReference(list); }
}
