options
{
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = false;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SonQueryParser)

package com.terracottatech.tcson.parser.query;

import com.terracottatech.tcson.parser.FieldReference;
import com.terracottatech.tcson.parser.ParserSupport;

import java.util.List;
import java.io.IOException;
import java.util.ArrayList;

public class SonQueryParser
{
}

PARSER_END(SonQueryParser)

TOKEN [ IGNORE_CASE ] :
{
  < KW_LSQUARE : "[" >
  | < KW_RSQUARE : "]" >
  | < KW_COMMA : "," >
  | < KW_DQUOTE : "\"" >
  | < KW_COLON : ":" >
  | < KW_PERIOD : "." >
}

SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN [IGNORE_CASE] :
{
   <DQ_LITERAL: <KW_DQUOTE> ( <ESCAPE_CHAR> | <ALPHA> )+ <KW_DQUOTE> >
 | <SIMPLE_STRING: (["a"-"z", "A"-"Z"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
 | <#INT_SIGN: ["-", "+"]>
 | <#DIGIT: ["0"-"9"] >
 | <INT_NUMBER: (<INT_SIGN>)? (<DIGIT>)+ >
 | <#ALPHA: ~["\\", ".", "[", "]"] >
 | <#ESCAPE_CHAR: "\\" ["[", "\\", "]", ".", "u"]>
 | <#_WHITESPACE: ( " " | "\t" | "\n" | "\r" | "\u3000")* >
}

/*
    respin2:

        <dotspec> := '.' <singleStep>* <eof>

        <singlestep> := <angleStep> | <quoteStep> | <simpleStep>
        <angleStep> := '[' ( ']' | ((<arrayStep> <quoteStep> | <simplestep> ) ']'))
        <quoteStep> := '"' <escapedChars> '"'
        <simpleStep> := ("a-zA-Z" ("a-zA-Z0-9_)*)
        <arrayStep> := <arraySingle> (',' <arraySingle>>)*
        <arraySingle> := <integer> | <integer> ':' <integer>
        <integer> ('+'|'-')? ( '0' | '1'-'9' ('0'-'9')* )
 */

List<FieldReference> dotSpec():
{
   ArrayList<FieldReference> list=new ArrayList<>();
   FieldReference fr;
}
{
   (
      (<KW_PERIOD>)?
      (
         fr = singleStep() { list.add(fr); }
         (
            (<KW_PERIOD>)?
            fr = singleStep() { list.add(fr); }
         )*
      )?
      <EOF>
   )
   { return list; }
}

// <singlestep> := <angleStep> | <quoteStep> | <simpleStep>
FieldReference singleStep():
{
  FieldReference ret;
}
{
   ( ret= angleStep() | ret = stringStep() | ret = simpleStep() )
   { return ret; }
}

// <angleStep> := '[' ( ']' | ((<arrayStep> <quoteStep> | <simplestep> ) ']'))
FieldReference angleStep():
{
   FieldReference ret;
 }
{
   <KW_LSQUARE>
   (
      <KW_RSQUARE> { return new FieldReference(); }
      |
      (
         (
            ret= arrayStep() | ret= stringStep()
         )
         <KW_RSQUARE>
      ) { return ret; }
   )
}

// <quoteStep> := '"' <escapedChars> '"'
FieldReference stringStep():
{
   Token t;
}
{

   (
     t=<DQ_LITERAL>
   )
   {
      try {
         return new FieldReference(ParserSupport.unescapeQuoted(t.image));
      } catch(IOException e) {
         throw new ParseException();
      }
   }
}

// <simpleStep> := ("a-zA-Z" ("a-zA-Z0-9_)*)
FieldReference simpleStep():
{
   Token t;
}
{

   ( t=<SIMPLE_STRING> )
   {
      return new FieldReference(t.image);
   }
}

//<arrayStep> := <arraySingle> (',' <arraySingle>>)*
FieldReference arrayStep():
{
   List<FieldReference.ArraySlice> list = new ArrayList<>();
   FieldReference.ArraySlice p;
}
{
   (
      p=arraySlice() { list.add(p); }
      (
         <KW_COMMA>
         p=arraySlice() { list.add(p); }
      )*
   )
   { return new FieldReference(list); }
}

// <arraySingle> := <integer> | <integer> ':' <integer>
FieldReference.ArraySlice arraySlice():
{
   Token t1=null;
   Token t2=null;

}
{
   ( t1=<INT_NUMBER>
       (
         <KW_COLON>
         t2=<INT_NUMBER>
       )?
   )
   {
      if(t2==null) {
         return new FieldReference.ArraySlice(Integer.parseInt(t1.image));
      } else {
         FieldReference.ArraySlice ret = new FieldReference.ArraySlice(Integer.parseInt(t1.image),
            Integer.parseInt(t2.image));
         return ret;
      }
   }
}

