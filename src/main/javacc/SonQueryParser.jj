options
{
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = false;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(SonQueryParser)

package com.terracottatech.tcson.parser.query;

import com.terracottatech.tcson.parser.FieldReference;
import com.terracottatech.tcson.parser.ParserSupport;

import java.util.List;
import java.io.IOException;
import java.util.ArrayList;

public class SonQueryParser
{
}

PARSER_END(SonQueryParser)

TOKEN [ IGNORE_CASE ] :
{
  < #KW_LSQUARE : "[" >
  | < #KW_RSQUARE : "]" >
  | < KW_COMMA : "," >
  | < KW_COLON : ":" >
  | < KW_PERIOD : "." >
}

SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN [IGNORE_CASE] :
{
  <STRING_LITERAL: ( <ESCAPE_CHAR> | <ALPHA> )+>
 | <ARRSPEC: <KW_LSQUARE> <_WHITESPACE> ( <ARRPART> <_WHITESPACE> (<KW_COMMA> <_WHITESPACE> <ARRPART>)* ) ? <_WHITESPACE> <KW_RSQUARE> >
 | <#INT_SPAN: <INT_NUMBER> "-" <INT_NUMBER> >
 | <#DIGIT: ["0"-"9"] >
 | <#INT_NUMBER: (<DIGIT>)+ >
 | <#ARRPART: <INT_NUMBER> | <INT_SPAN> >
 | <#ALPHA: ~["\\", ".", "[", "]"] >
 | <#ESCAPE_CHAR: "\\" ["[", "\\", "]", ".", "u"]>
 | <#_WHITESPACE: ( " " | "\t" | "\n" | "\r" | "\u3000")* >
}

/*
    respin:

        <dotspec> := <dotspec1> | <dotspec2>
        <dotspec1> := (<single ref>) ( <innerpair> )*
        <dotspec2> := "." ( <innerpair> )*
        <innerpair> := ("." (<single ref>)? )
        <single ref> := ( <array ref> | <field ref> )
        <array ref> := [ <arrspec> ]
        <field ref> := <alphastring>

 */

List<FieldReference> dotterSpec():
{
  List<FieldReference> ret=new ArrayList();
}
{
   (
      dotspec1(ret)
      | dotspec2(ret)
   )
   { return ret; }
}

void dotspec1(List<FieldReference> ret):
{
  FieldReference fr=null;
}
{
   (
      singleRef(ret)
      (
         innerPair(ret)
      )*
   )
}

void dotspec2(List<FieldReference> ret):
{
  FieldReference fr=null;
}
{
   (
      <KW_PERIOD> { ret.add(new FieldReference()); }
      (
         innerPair(ret)
      )*
   )
}

void innerPair(List<FieldReference> ret):
{
   int sz=ret.size();
}
{
    (
       <KW_PERIOD>
       (
          singleRef(ret)
       )?
    )
    { if(ret.size()==sz) { ret.add(new FieldReference()); } }
}

void singleRef(List<FieldReference> ret):
{
   FieldReference fr=null;
}
{
   (
       (
          fr=fieldComponent() { ret.add(fr); }
          ( fr=arraySpec() { ret.add(fr); })*
       )
       |
       (
          (fr=arraySpec() { ret.add(fr); })+
       )
   )
}

FieldReference fieldComponent():
{
   Token t1;
}
{

   t1=<STRING_LITERAL> {
      try {
         return new FieldReference(ParserSupport.unescapeUnquoted(t1.image.trim()));
      } catch(IOException e) {
         throw new ParseException(e.getMessage());
      }
   }
}

FieldReference arraySpec():
{
   List<Integer> list = new ArrayList<>();
   Token t1;
}
{
   (
      t1=<ARRSPEC>
      {
         list=ParserSupport.parseArraySpec(t1.image);
      }
   )
   { return new FieldReference(list); }
}
